pmx_read * const read = pmx_read_create_file( file );
if ( !read ) {
	// Out of memory
}
pmx_read_destroy( read );



pmx_header header;
pmx_read_header( read, &header );

if ( pmx_header_check( &header ) ) {
	// Header mismatch
}



typedef struct pmx_info_s {
	pmx_byte	dataCount;
	pmx_byte	textTypeEncoding;
	pmx_byte	additionalUVCount;
} pmx_info;

pmx_info info;
pmx_read_info( read, &info );



typedef struct pmx_text_s {
	pmx_int	size;
	void *	bytes;
} pmx_text;

pmx_text *	pmx_text_create();
void		pmx_text_destroy( pmx_text * const _text );
pmx_int		pmx_text_print( const pmx_text * const _text );
pmx_int		pmx_text_size( const pmx_text * const _text );
pmx_int		pmx_text_char( const pmx_text * const _text, const pmx_info * const _info, char * const _dest );
pmx_int		pmx_text_wchar( const pmx_text * const _text, const pmx_info * const _info, wchar_t * const _dest );



typedef struct pmx_isize_s {
	pmx_byte	vertex
	pmx_byte	texture
	pmx_byte	material
	pmx_byte	bone
	pmx_byte	morph
	pmx_byte	rigidBody
} pmx_isize;

pmx_isize isize;
pmx_read_isize( read, &isize );



typedef struct pmx_minfo_s {
	struct {
		pmx_text	local;
		pmx_text	global;
	} name;

	struct {
		pmx_text	local;
		pmx_text	global;
	} comment;
} minfo;

pmx_minfo * const minfo = pmx_minfo_create();
pmx_read_minfo( read, minfo );
pmx_minfo_destroy( minfo );



char * const localName = pmx_read_gets_local( read, PMX_MINFO_NAME, 0 );
char * const globalName = pmx_read_gets_global( read, PMX_MINFO_NAME, 0 );
char * const localComment = pmx_read_gets_local( read, PMX_MINFO_COMMENT, 0 );
char * const globalComment = pmx_read_gets_global( read, PMX_MINFO_COMMENT, 0 );



wchar_t * const localName = pmx_read_getls_local( read, PMX_MINFO_NAME, 0 );
wchar_t * const globalName = pmx_read_getls_global( read, PMX_MINFO_NAME, 0 );
wchar_t * const localComment = pmx_read_getls_local( read, PMX_MINFO_COMMENT, 0 );
wchar_t * const globalComment = pmx_read_getls_global( read, PMX_MINFO_COMMENT, 0 );



pmx_int vCount = pmx_read_vertex_count( read );



typedef struct pmx_vertex_s {
	pmx_vec3	position;
	pmx_vec3	normal;
	pmx_vec2	uv;
	pmx_vec4 *	additionalUV;
	pmx_byte	weightType;
	pmx_weight *	weightDefinition;
	pmx_float	edgeScale;
} pmx_vertex;

